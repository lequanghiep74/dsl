/*
* generated by Xtext
*/

package org.xtext.example.domainmodel.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class DomainmodelGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Assignment cMyDSLAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cMyDSLMyDSLParserRuleCall_0 = (RuleCall)cMyDSLAssignment.eContents().get(0);
		
		//Model:
		//
		//	myDSL+=myDSL*;
		public ParserRule getRule() { return rule; }

		//myDSL+=myDSL*
		public Assignment getMyDSLAssignment() { return cMyDSLAssignment; }

		//myDSL
		public RuleCall getMyDSLMyDSLParserRuleCall_0() { return cMyDSLMyDSLParserRuleCall_0; }
	}

	public class MyDSLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "myDSL");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEnumParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDefineParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPreconditionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cTestcaseParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cFunctionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cRunParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//myDSL:
		//
		//	Enum | Define | Precondition | Testcase | Function | Run;
		public ParserRule getRule() { return rule; }

		//Enum | Define | Precondition | Testcase | Function | Run
		public Alternatives getAlternatives() { return cAlternatives; }

		//Enum
		public RuleCall getEnumParserRuleCall_0() { return cEnumParserRuleCall_0; }

		//Define
		public RuleCall getDefineParserRuleCall_1() { return cDefineParserRuleCall_1; }

		//Precondition
		public RuleCall getPreconditionParserRuleCall_2() { return cPreconditionParserRuleCall_2; }

		//Testcase
		public RuleCall getTestcaseParserRuleCall_3() { return cTestcaseParserRuleCall_3; }

		//Function
		public RuleCall getFunctionParserRuleCall_4() { return cFunctionParserRuleCall_4; }

		//Run
		public RuleCall getRunParserRuleCall_5() { return cRunParserRuleCall_5; }
	}

	public class ConditionOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConditionOperation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cVerticalLineVerticalLineKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cAmpersandAmpersandKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		////  "'" ( '\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|"'") )* "'";
		//
		//ConditionOperation:
		//
		//	"||" | "&&";
		public ParserRule getRule() { return rule; }

		//"||" | "&&"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"||"
		public Keyword getVerticalLineVerticalLineKeyword_0() { return cVerticalLineVerticalLineKeyword_0; }

		//"&&"
		public Keyword getAmpersandAmpersandKeyword_1() { return cAmpersandAmpersandKeyword_1; }
	}

	public class MathOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MathOperation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cAsteriskKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cSolidusKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cCircumflexAccentKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cPercentSignKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		//MathOperation:
		//
		//	"+" | "-" | "*" | "/" | "^" | "%";
		public ParserRule getRule() { return rule; }

		//"+" | "-" | "*" | "/" | "^" | "%"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"+"
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }

		//"*"
		public Keyword getAsteriskKeyword_2() { return cAsteriskKeyword_2; }

		//"/"
		public Keyword getSolidusKeyword_3() { return cSolidusKeyword_3; }

		//"^"
		public Keyword getCircumflexAccentKeyword_4() { return cCircumflexAccentKeyword_4; }

		//"%"
		public Keyword getPercentSignKeyword_5() { return cPercentSignKeyword_5; }
	}

	public class CompareOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CompareOperation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cGreaterThanSignEqualsSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cLessThanSignEqualsSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		//CompareOperation:
		//
		//	">" | "<" | "=" | ">=" | "<=";
		public ParserRule getRule() { return rule; }

		//">" | "<" | "=" | ">=" | "<="
		public Alternatives getAlternatives() { return cAlternatives; }

		//">"
		public Keyword getGreaterThanSignKeyword_0() { return cGreaterThanSignKeyword_0; }

		//"<"
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//">="
		public Keyword getGreaterThanSignEqualsSignKeyword_3() { return cGreaterThanSignEqualsSignKeyword_3; }

		//"<="
		public Keyword getLessThanSignEqualsSignKeyword_4() { return cLessThanSignEqualsSignKeyword_4; }
	}

	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Variable");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMyIDParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDIGITTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cREALTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Variable:
		//
		//	MyID | DIGIT | REAL;
		public ParserRule getRule() { return rule; }

		//MyID | DIGIT | REAL
		public Alternatives getAlternatives() { return cAlternatives; }

		//MyID
		public RuleCall getMyIDParserRuleCall_0() { return cMyIDParserRuleCall_0; }

		//DIGIT
		public RuleCall getDIGITTerminalRuleCall_1() { return cDIGITTerminalRuleCall_1; }

		//REAL
		public RuleCall getREALTerminalRuleCall_2() { return cREALTerminalRuleCall_2; }
	}

	public class MathFormulaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MathFormula");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cVariableParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cMathOperationParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final RuleCall cVariableParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//MathFormula:
		//
		//	"("? Variable (MathOperation Variable)* ")"?;
		public ParserRule getRule() { return rule; }

		//"("? Variable (MathOperation Variable)* ")"?
		public Group getGroup() { return cGroup; }

		//"("?
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//Variable
		public RuleCall getVariableParserRuleCall_1() { return cVariableParserRuleCall_1; }

		//(MathOperation Variable)*
		public Group getGroup_2() { return cGroup_2; }

		//MathOperation
		public RuleCall getMathOperationParserRuleCall_2_0() { return cMathOperationParserRuleCall_2_0; }

		//Variable
		public RuleCall getVariableParserRuleCall_2_1() { return cVariableParserRuleCall_2_1; }

		//")"?
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class CompareFormulaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CompareFormula");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cMathFormulaParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final RuleCall cCompareOperationParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cMathFormulaParserRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cMathFormulaParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cCompareOperationParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		
		//CompareFormula:
		//
		//	MathFormula CompareOperation MathFormula | MathFormula CompareOperation STRING;
		public ParserRule getRule() { return rule; }

		//MathFormula CompareOperation MathFormula | MathFormula CompareOperation STRING
		public Alternatives getAlternatives() { return cAlternatives; }

		//MathFormula CompareOperation MathFormula
		public Group getGroup_0() { return cGroup_0; }

		//MathFormula
		public RuleCall getMathFormulaParserRuleCall_0_0() { return cMathFormulaParserRuleCall_0_0; }

		//CompareOperation
		public RuleCall getCompareOperationParserRuleCall_0_1() { return cCompareOperationParserRuleCall_0_1; }

		//MathFormula
		public RuleCall getMathFormulaParserRuleCall_0_2() { return cMathFormulaParserRuleCall_0_2; }

		//MathFormula CompareOperation STRING
		public Group getGroup_1() { return cGroup_1; }

		//MathFormula
		public RuleCall getMathFormulaParserRuleCall_1_0() { return cMathFormulaParserRuleCall_1_0; }

		//CompareOperation
		public RuleCall getCompareOperationParserRuleCall_1_1() { return cCompareOperationParserRuleCall_1_1; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1_2() { return cSTRINGTerminalRuleCall_1_2; }
	}

	public class MyIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MyID");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1_1 = (RuleCall)cGroup_1_1.eContents().get(1);
		
		//MyID:
		//
		//	"-"? (ID | "!" ID);
		public ParserRule getRule() { return rule; }

		//"-"? (ID | "!" ID)
		public Group getGroup() { return cGroup; }

		//"-"?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//ID | "!" ID
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_0() { return cIDTerminalRuleCall_1_0; }

		//"!" ID
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"!"
		public Keyword getExclamationMarkKeyword_1_1_0() { return cExclamationMarkKeyword_1_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1_1() { return cIDTerminalRuleCall_1_1_1; }
	}

	public class TestcaseElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TestcaseElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCompareFormulaParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMathFormulaParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TestcaseElement:
		//
		//	CompareFormula | MathFormula;
		public ParserRule getRule() { return rule; }

		//CompareFormula | MathFormula
		public Alternatives getAlternatives() { return cAlternatives; }

		//CompareFormula
		public RuleCall getCompareFormulaParserRuleCall_0() { return cCompareFormulaParserRuleCall_0; }

		//MathFormula
		public RuleCall getMathFormulaParserRuleCall_1() { return cMathFormulaParserRuleCall_1; }
	}

	public class EnumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Enum");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final Keyword cIntKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Keyword cRealKeyword_1_2 = (Keyword)cAlternatives_1.eContents().get(2);
		private final Keyword cBoolKeyword_1_3 = (Keyword)cAlternatives_1.eContents().get(3);
		private final Keyword cStringKeyword_1_4 = (Keyword)cAlternatives_1.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cEnumOptionsParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		////enum
		//
		//Enum:
		//
		//	"enum" (ID | "Int" | "Real" | "Bool" | "String") "{" EnumOptions "}";
		public ParserRule getRule() { return rule; }

		//"enum" (ID | "Int" | "Real" | "Bool" | "String") "{" EnumOptions "}"
		public Group getGroup() { return cGroup; }

		//"enum"
		public Keyword getEnumKeyword_0() { return cEnumKeyword_0; }

		//ID | "Int" | "Real" | "Bool" | "String"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_0() { return cIDTerminalRuleCall_1_0; }

		//"Int"
		public Keyword getIntKeyword_1_1() { return cIntKeyword_1_1; }

		//"Real"
		public Keyword getRealKeyword_1_2() { return cRealKeyword_1_2; }

		//"Bool"
		public Keyword getBoolKeyword_1_3() { return cBoolKeyword_1_3; }

		//"String"
		public Keyword getStringKeyword_1_4() { return cStringKeyword_1_4; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//EnumOptions
		public RuleCall getEnumOptionsParserRuleCall_3() { return cEnumOptionsParserRuleCall_3; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class EnumOptionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnumOptions");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//EnumOptions:
		//
		//	ID*;
		public ParserRule getRule() { return rule; }

		//ID*
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}

	public class DefineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Define");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDefineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final RuleCall cCompareFormulaParserRuleCall_4_0 = (RuleCall)cAlternatives_4.eContents().get(0);
		private final RuleCall cMyIDParserRuleCall_4_1 = (RuleCall)cAlternatives_4.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final RuleCall cConditionOperationParserRuleCall_6_0 = (RuleCall)cGroup_6.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Alternatives cAlternatives_6_2 = (Alternatives)cGroup_6.eContents().get(2);
		private final RuleCall cCompareFormulaParserRuleCall_6_2_0 = (RuleCall)cAlternatives_6_2.eContents().get(0);
		private final RuleCall cMyIDParserRuleCall_6_2_1 = (RuleCall)cAlternatives_6_2.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_6_3 = (Keyword)cGroup_6.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		////define
		//
		//Define:
		//
		//	"define" name=ID "{" "("? (CompareFormula | MyID) ")"? (ConditionOperation "("? (CompareFormula | MyID) ")"?)* "}";
		public ParserRule getRule() { return rule; }

		//"define" name=ID "{" "("? (CompareFormula | MyID) ")"? (ConditionOperation "("? (CompareFormula | MyID) ")"?)* "}"
		public Group getGroup() { return cGroup; }

		//"define"
		public Keyword getDefineKeyword_0() { return cDefineKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"("?
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//CompareFormula | MyID
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//CompareFormula
		public RuleCall getCompareFormulaParserRuleCall_4_0() { return cCompareFormulaParserRuleCall_4_0; }

		//MyID
		public RuleCall getMyIDParserRuleCall_4_1() { return cMyIDParserRuleCall_4_1; }

		//")"?
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//(ConditionOperation "("? (CompareFormula | MyID) ")"?)*
		public Group getGroup_6() { return cGroup_6; }

		//ConditionOperation
		public RuleCall getConditionOperationParserRuleCall_6_0() { return cConditionOperationParserRuleCall_6_0; }

		//"("?
		public Keyword getLeftParenthesisKeyword_6_1() { return cLeftParenthesisKeyword_6_1; }

		//CompareFormula | MyID
		public Alternatives getAlternatives_6_2() { return cAlternatives_6_2; }

		//CompareFormula
		public RuleCall getCompareFormulaParserRuleCall_6_2_0() { return cCompareFormulaParserRuleCall_6_2_0; }

		//MyID
		public RuleCall getMyIDParserRuleCall_6_2_1() { return cMyIDParserRuleCall_6_2_1; }

		//")"?
		public Keyword getRightParenthesisKeyword_6_3() { return cRightParenthesisKeyword_6_3; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class PreconditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Precondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPreconditionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cCompareFormulaParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final RuleCall cConditionOperationParserRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final RuleCall cCompareFormulaParserRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		////precondition
		//
		//Precondition:
		//
		//	"precondition" "{" CompareFormula (ConditionOperation CompareFormula)* "}";
		public ParserRule getRule() { return rule; }

		//"precondition" "{" CompareFormula (ConditionOperation CompareFormula)* "}"
		public Group getGroup() { return cGroup; }

		//"precondition"
		public Keyword getPreconditionKeyword_0() { return cPreconditionKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//CompareFormula
		public RuleCall getCompareFormulaParserRuleCall_2() { return cCompareFormulaParserRuleCall_2; }

		//(ConditionOperation CompareFormula)*
		public Group getGroup_3() { return cGroup_3; }

		//ConditionOperation
		public RuleCall getConditionOperationParserRuleCall_3_0() { return cConditionOperationParserRuleCall_3_0; }

		//CompareFormula
		public RuleCall getCompareFormulaParserRuleCall_3_1() { return cCompareFormulaParserRuleCall_3_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class TestConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TestCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cTestcaseElementParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Group cGroup_1_4 = (Group)cGroup_1.eContents().get(4);
		private final RuleCall cConditionOperationParserRuleCall_1_4_0 = (RuleCall)cGroup_1_4.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_4_1 = (Keyword)cGroup_1_4.eContents().get(1);
		private final RuleCall cTestcaseElementParserRuleCall_1_4_2 = (RuleCall)cGroup_1_4.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_1_4_3 = (Keyword)cGroup_1_4.eContents().get(3);
		private final Keyword cRightParenthesisKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		
		//TestCondition:
		//
		//	STRING ("("? TestcaseElement ")"? "("? (ConditionOperation "("? TestcaseElement ")"?)* ")"?)?;
		public ParserRule getRule() { return rule; }

		//STRING ("("? TestcaseElement ")"? "("? (ConditionOperation "("? TestcaseElement ")"?)* ")"?)?
		public Group getGroup() { return cGroup; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }

		//("("? TestcaseElement ")"? "("? (ConditionOperation "("? TestcaseElement ")"?)* ")"?)?
		public Group getGroup_1() { return cGroup_1; }

		//"("?
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//TestcaseElement
		public RuleCall getTestcaseElementParserRuleCall_1_1() { return cTestcaseElementParserRuleCall_1_1; }

		//")"?
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }

		//"("?
		public Keyword getLeftParenthesisKeyword_1_3() { return cLeftParenthesisKeyword_1_3; }

		//(ConditionOperation "("? TestcaseElement ")"?)*
		public Group getGroup_1_4() { return cGroup_1_4; }

		//ConditionOperation
		public RuleCall getConditionOperationParserRuleCall_1_4_0() { return cConditionOperationParserRuleCall_1_4_0; }

		//"("?
		public Keyword getLeftParenthesisKeyword_1_4_1() { return cLeftParenthesisKeyword_1_4_1; }

		//TestcaseElement
		public RuleCall getTestcaseElementParserRuleCall_1_4_2() { return cTestcaseElementParserRuleCall_1_4_2; }

		//")"?
		public Keyword getRightParenthesisKeyword_1_4_3() { return cRightParenthesisKeyword_1_4_3; }

		//")"?
		public Keyword getRightParenthesisKeyword_1_5() { return cRightParenthesisKeyword_1_5; }
	}

	public class TestcaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Testcase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTestcaseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cTestConditionParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		////test case
		//
		//Testcase:
		//
		//	"testcase" "{" TestCondition* "}";
		public ParserRule getRule() { return rule; }

		//"testcase" "{" TestCondition* "}"
		public Group getGroup() { return cGroup; }

		//"testcase"
		public Keyword getTestcaseKeyword_0() { return cTestcaseKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//TestCondition*
		public RuleCall getTestConditionParserRuleCall_2() { return cTestConditionParserRuleCall_2; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class DatatypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Datatype");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cIntKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cRealKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cBoolKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cStringKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//Datatype:
		//
		//	"Int" | "Real" | "Bool" | "String";
		public ParserRule getRule() { return rule; }

		//"Int" | "Real" | "Bool" | "String"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"Int"
		public Keyword getIntKeyword_0() { return cIntKeyword_0; }

		//"Real"
		public Keyword getRealKeyword_1() { return cRealKeyword_1; }

		//"Bool"
		public Keyword getBoolKeyword_2() { return cBoolKeyword_2; }

		//"String"
		public Keyword getStringKeyword_3() { return cStringKeyword_3; }
	}

	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Function");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFunctionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final RuleCall cDatatypeParserRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Assignment cNameAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_3_1_0 = (RuleCall)cNameAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final RuleCall cDatatypeParserRuleCall_3_2_1 = (RuleCall)cGroup_3_2.eContents().get(1);
		private final Assignment cNameAssignment_3_2_2 = (Assignment)cGroup_3_2.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_3_2_2_0 = (RuleCall)cNameAssignment_3_2_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Function:
		//
		//	"function" name=ID "(" (Datatype name=ID ("," Datatype name=ID)*)* ")";
		public ParserRule getRule() { return rule; }

		//"function" name=ID "(" (Datatype name=ID ("," Datatype name=ID)*)* ")"
		public Group getGroup() { return cGroup; }

		//"function"
		public Keyword getFunctionKeyword_0() { return cFunctionKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//(Datatype name=ID ("," Datatype name=ID)*)*
		public Group getGroup_3() { return cGroup_3; }

		//Datatype
		public RuleCall getDatatypeParserRuleCall_3_0() { return cDatatypeParserRuleCall_3_0; }

		//name=ID
		public Assignment getNameAssignment_3_1() { return cNameAssignment_3_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_1_0() { return cNameIDTerminalRuleCall_3_1_0; }

		//("," Datatype name=ID)*
		public Group getGroup_3_2() { return cGroup_3_2; }

		//","
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }

		//Datatype
		public RuleCall getDatatypeParserRuleCall_3_2_1() { return cDatatypeParserRuleCall_3_2_1; }

		//name=ID
		public Assignment getNameAssignment_3_2_2() { return cNameAssignment_3_2_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_2_2_0() { return cNameIDTerminalRuleCall_3_2_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class RunElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Run");
		private final Keyword cRunKeyword = (Keyword)rule.eContents().get(1);
		
		//Run:
		//
		//	"run";
		public ParserRule getRule() { return rule; }

		//"run"
		public Keyword getRunKeyword() { return cRunKeyword; }
	}
	
	
	private ModelElements pModel;
	private MyDSLElements pMyDSL;
	private TerminalRule tDIGIT;
	private TerminalRule tREAL;
	private TerminalRule tSTRING;
	private ConditionOperationElements pConditionOperation;
	private MathOperationElements pMathOperation;
	private CompareOperationElements pCompareOperation;
	private VariableElements pVariable;
	private MathFormulaElements pMathFormula;
	private CompareFormulaElements pCompareFormula;
	private MyIDElements pMyID;
	private TestcaseElementElements pTestcaseElement;
	private EnumElements pEnum;
	private EnumOptionsElements pEnumOptions;
	private DefineElements pDefine;
	private PreconditionElements pPrecondition;
	private TestConditionElements pTestCondition;
	private TestcaseElements pTestcase;
	private DatatypeElements pDatatype;
	private FunctionElements pFunction;
	private RunElements pRun;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public DomainmodelGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.domainmodel.Domainmodel".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//
	//	myDSL+=myDSL*;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//myDSL:
	//
	//	Enum | Define | Precondition | Testcase | Function | Run;
	public MyDSLElements getMyDSLAccess() {
		return (pMyDSL != null) ? pMyDSL : (pMyDSL = new MyDSLElements());
	}
	
	public ParserRule getMyDSLRule() {
		return getMyDSLAccess().getRule();
	}

	//terminal DIGIT:
	//
	//	"-"? "0".."9"*;
	public TerminalRule getDIGITRule() {
		return (tDIGIT != null) ? tDIGIT : (tDIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DIGIT"));
	} 

	//terminal REAL:
	//
	//	DIGIT "." DIGIT;
	public TerminalRule getREALRule() {
		return (tREAL != null) ? tREAL : (tREAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "REAL"));
	} 

	//terminal STRING:
	//
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"";
	public TerminalRule getSTRINGRule() {
		return (tSTRING != null) ? tSTRING : (tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING"));
	} 

	////  "'" ( '\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|"'") )* "'";
	//
	//ConditionOperation:
	//
	//	"||" | "&&";
	public ConditionOperationElements getConditionOperationAccess() {
		return (pConditionOperation != null) ? pConditionOperation : (pConditionOperation = new ConditionOperationElements());
	}
	
	public ParserRule getConditionOperationRule() {
		return getConditionOperationAccess().getRule();
	}

	//MathOperation:
	//
	//	"+" | "-" | "*" | "/" | "^" | "%";
	public MathOperationElements getMathOperationAccess() {
		return (pMathOperation != null) ? pMathOperation : (pMathOperation = new MathOperationElements());
	}
	
	public ParserRule getMathOperationRule() {
		return getMathOperationAccess().getRule();
	}

	//CompareOperation:
	//
	//	">" | "<" | "=" | ">=" | "<=";
	public CompareOperationElements getCompareOperationAccess() {
		return (pCompareOperation != null) ? pCompareOperation : (pCompareOperation = new CompareOperationElements());
	}
	
	public ParserRule getCompareOperationRule() {
		return getCompareOperationAccess().getRule();
	}

	//Variable:
	//
	//	MyID | DIGIT | REAL;
	public VariableElements getVariableAccess() {
		return (pVariable != null) ? pVariable : (pVariable = new VariableElements());
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}

	//MathFormula:
	//
	//	"("? Variable (MathOperation Variable)* ")"?;
	public MathFormulaElements getMathFormulaAccess() {
		return (pMathFormula != null) ? pMathFormula : (pMathFormula = new MathFormulaElements());
	}
	
	public ParserRule getMathFormulaRule() {
		return getMathFormulaAccess().getRule();
	}

	//CompareFormula:
	//
	//	MathFormula CompareOperation MathFormula | MathFormula CompareOperation STRING;
	public CompareFormulaElements getCompareFormulaAccess() {
		return (pCompareFormula != null) ? pCompareFormula : (pCompareFormula = new CompareFormulaElements());
	}
	
	public ParserRule getCompareFormulaRule() {
		return getCompareFormulaAccess().getRule();
	}

	//MyID:
	//
	//	"-"? (ID | "!" ID);
	public MyIDElements getMyIDAccess() {
		return (pMyID != null) ? pMyID : (pMyID = new MyIDElements());
	}
	
	public ParserRule getMyIDRule() {
		return getMyIDAccess().getRule();
	}

	//TestcaseElement:
	//
	//	CompareFormula | MathFormula;
	public TestcaseElementElements getTestcaseElementAccess() {
		return (pTestcaseElement != null) ? pTestcaseElement : (pTestcaseElement = new TestcaseElementElements());
	}
	
	public ParserRule getTestcaseElementRule() {
		return getTestcaseElementAccess().getRule();
	}

	////enum
	//
	//Enum:
	//
	//	"enum" (ID | "Int" | "Real" | "Bool" | "String") "{" EnumOptions "}";
	public EnumElements getEnumAccess() {
		return (pEnum != null) ? pEnum : (pEnum = new EnumElements());
	}
	
	public ParserRule getEnumRule() {
		return getEnumAccess().getRule();
	}

	//EnumOptions:
	//
	//	ID*;
	public EnumOptionsElements getEnumOptionsAccess() {
		return (pEnumOptions != null) ? pEnumOptions : (pEnumOptions = new EnumOptionsElements());
	}
	
	public ParserRule getEnumOptionsRule() {
		return getEnumOptionsAccess().getRule();
	}

	////define
	//
	//Define:
	//
	//	"define" name=ID "{" "("? (CompareFormula | MyID) ")"? (ConditionOperation "("? (CompareFormula | MyID) ")"?)* "}";
	public DefineElements getDefineAccess() {
		return (pDefine != null) ? pDefine : (pDefine = new DefineElements());
	}
	
	public ParserRule getDefineRule() {
		return getDefineAccess().getRule();
	}

	////precondition
	//
	//Precondition:
	//
	//	"precondition" "{" CompareFormula (ConditionOperation CompareFormula)* "}";
	public PreconditionElements getPreconditionAccess() {
		return (pPrecondition != null) ? pPrecondition : (pPrecondition = new PreconditionElements());
	}
	
	public ParserRule getPreconditionRule() {
		return getPreconditionAccess().getRule();
	}

	//TestCondition:
	//
	//	STRING ("("? TestcaseElement ")"? "("? (ConditionOperation "("? TestcaseElement ")"?)* ")"?)?;
	public TestConditionElements getTestConditionAccess() {
		return (pTestCondition != null) ? pTestCondition : (pTestCondition = new TestConditionElements());
	}
	
	public ParserRule getTestConditionRule() {
		return getTestConditionAccess().getRule();
	}

	////test case
	//
	//Testcase:
	//
	//	"testcase" "{" TestCondition* "}";
	public TestcaseElements getTestcaseAccess() {
		return (pTestcase != null) ? pTestcase : (pTestcase = new TestcaseElements());
	}
	
	public ParserRule getTestcaseRule() {
		return getTestcaseAccess().getRule();
	}

	//Datatype:
	//
	//	"Int" | "Real" | "Bool" | "String";
	public DatatypeElements getDatatypeAccess() {
		return (pDatatype != null) ? pDatatype : (pDatatype = new DatatypeElements());
	}
	
	public ParserRule getDatatypeRule() {
		return getDatatypeAccess().getRule();
	}

	//Function:
	//
	//	"function" name=ID "(" (Datatype name=ID ("," Datatype name=ID)*)* ")";
	public FunctionElements getFunctionAccess() {
		return (pFunction != null) ? pFunction : (pFunction = new FunctionElements());
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}

	//Run:
	//
	//	"run";
	public RunElements getRunAccess() {
		return (pRun != null) ? pRun : (pRun = new RunElements());
	}
	
	public ParserRule getRunRule() {
		return getRunAccess().getRule();
	}

	//terminal ID:
	//
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal ML_COMMENT:
	//
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
