/*
* generated by Xtext
*/
grammar InternalDomainmodel;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.xtext.example.domainmodel.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.domainmodel.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.domainmodel.services.DomainmodelGrammarAccess;

}

@parser::members {

 	private DomainmodelGrammarAccess grammarAccess;
 	
    public InternalDomainmodelParser(TokenStream input, DomainmodelGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected DomainmodelGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getMyDSLMyDSLParserRuleCall_0()); 
	    }
		lv_myDSL_0_0=rulemyDSL		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"myDSL",
        		lv_myDSL_0_0, 
        		"myDSL");
	        afterParserOrEnumRuleCall();
	    }

)
)*
;





// Entry rule entryRulemyDSL
entryRulemyDSL returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMyDSLRule()); }
	 iv_rulemyDSL=rulemyDSL 
	 { $current=$iv_rulemyDSL.current; } 
	 EOF 
;

// Rule myDSL
rulemyDSL returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getMyDSLAccess().getEnumParserRuleCall_0()); 
    }
ruleEnum
    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getMyDSLAccess().getDefineParserRuleCall_1()); 
    }
    this_Define_1=ruleDefine
    { 
        $current = $this_Define_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getMyDSLAccess().getPreconditionParserRuleCall_2()); 
    }
rulePrecondition
    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getMyDSLAccess().getTestcaseParserRuleCall_3()); 
    }
ruleTestcase
    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getMyDSLAccess().getFunctionParserRuleCall_4()); 
    }
    this_Function_4=ruleFunction
    { 
        $current = $this_Function_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getMyDSLAccess().getRunParserRuleCall_5()); 
    }
ruleRun
    { 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleConditionOperation
entryRuleConditionOperation returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getConditionOperationRule()); } 
	 iv_ruleConditionOperation=ruleConditionOperation 
	 { $current=$iv_ruleConditionOperation.current.getText(); }  
	 EOF 
;

// Rule ConditionOperation
ruleConditionOperation returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='||' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getConditionOperationAccess().getVerticalLineVerticalLineKeyword_0()); 
    }

    |
	kw='&&' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getConditionOperationAccess().getAmpersandAmpersandKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleMathOperation
entryRuleMathOperation returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getMathOperationRule()); } 
	 iv_ruleMathOperation=ruleMathOperation 
	 { $current=$iv_ruleMathOperation.current.getText(); }  
	 EOF 
;

// Rule MathOperation
ruleMathOperation returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='+' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMathOperationAccess().getPlusSignKeyword_0()); 
    }

    |
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMathOperationAccess().getHyphenMinusKeyword_1()); 
    }

    |
	kw='*' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMathOperationAccess().getAsteriskKeyword_2()); 
    }

    |
	kw='/' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMathOperationAccess().getSolidusKeyword_3()); 
    }

    |
	kw='^' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMathOperationAccess().getCircumflexAccentKeyword_4()); 
    }

    |
	kw='%' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMathOperationAccess().getPercentSignKeyword_5()); 
    }
)
    ;





// Entry rule entryRuleCompareOperation
entryRuleCompareOperation returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getCompareOperationRule()); } 
	 iv_ruleCompareOperation=ruleCompareOperation 
	 { $current=$iv_ruleCompareOperation.current.getText(); }  
	 EOF 
;

// Rule CompareOperation
ruleCompareOperation returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCompareOperationAccess().getGreaterThanSignKeyword_0()); 
    }

    |
	kw='<' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCompareOperationAccess().getLessThanSignKeyword_1()); 
    }

    |
	kw='=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCompareOperationAccess().getEqualsSignKeyword_2()); 
    }

    |
	kw='>=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCompareOperationAccess().getGreaterThanSignEqualsSignKeyword_3()); 
    }

    |
	kw='<=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCompareOperationAccess().getLessThanSignEqualsSignKeyword_4()); 
    }
)
    ;





// Entry rule entryRuleVariable
entryRuleVariable returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableRule()); } 
	 iv_ruleVariable=ruleVariable 
	 { $current=$iv_ruleVariable.current.getText(); }  
	 EOF 
;

// Rule Variable
ruleVariable returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getVariableAccess().getMyIDParserRuleCall_0()); 
    }
    this_MyID_0=ruleMyID    {
		$current.merge(this_MyID_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |    this_DIGIT_1=RULE_DIGIT    {
		$current.merge(this_DIGIT_1);
    }

    { 
    newLeafNode(this_DIGIT_1, grammarAccess.getVariableAccess().getDIGITTerminalRuleCall_1()); 
    }

    |    this_REAL_2=RULE_REAL    {
		$current.merge(this_REAL_2);
    }

    { 
    newLeafNode(this_REAL_2, grammarAccess.getVariableAccess().getREALTerminalRuleCall_2()); 
    }
)
    ;





// Entry rule entryRuleMathFormula
entryRuleMathFormula returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getMathFormulaRule()); } 
	 iv_ruleMathFormula=ruleMathFormula 
	 { $current=$iv_ruleMathFormula.current.getText(); }  
	 EOF 
;

// Rule MathFormula
ruleMathFormula returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMathFormulaAccess().getLeftParenthesisKeyword_0()); 
    }
)?
    { 
        newCompositeNode(grammarAccess.getMathFormulaAccess().getVariableParserRuleCall_1()); 
    }
    this_Variable_1=ruleVariable    {
		$current.merge(this_Variable_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
    { 
        newCompositeNode(grammarAccess.getMathFormulaAccess().getMathOperationParserRuleCall_2_0()); 
    }
    this_MathOperation_2=ruleMathOperation    {
		$current.merge(this_MathOperation_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getMathFormulaAccess().getVariableParserRuleCall_2_1()); 
    }
    this_Variable_3=ruleVariable    {
		$current.merge(this_Variable_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*(
	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMathFormulaAccess().getRightParenthesisKeyword_3()); 
    }
)?)
    ;





// Entry rule entryRuleCompareFormula
entryRuleCompareFormula returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getCompareFormulaRule()); } 
	 iv_ruleCompareFormula=ruleCompareFormula 
	 { $current=$iv_ruleCompareFormula.current.getText(); }  
	 EOF 
;

// Rule CompareFormula
ruleCompareFormula returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    { 
        newCompositeNode(grammarAccess.getCompareFormulaAccess().getMathFormulaParserRuleCall_0_0()); 
    }
    this_MathFormula_0=ruleMathFormula    {
		$current.merge(this_MathFormula_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getCompareFormulaAccess().getCompareOperationParserRuleCall_0_1()); 
    }
    this_CompareOperation_1=ruleCompareOperation    {
		$current.merge(this_CompareOperation_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getCompareFormulaAccess().getMathFormulaParserRuleCall_0_2()); 
    }
    this_MathFormula_2=ruleMathFormula    {
		$current.merge(this_MathFormula_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    |(
    { 
        newCompositeNode(grammarAccess.getCompareFormulaAccess().getMathFormulaParserRuleCall_1_0()); 
    }
    this_MathFormula_3=ruleMathFormula    {
		$current.merge(this_MathFormula_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getCompareFormulaAccess().getCompareOperationParserRuleCall_1_1()); 
    }
    this_CompareOperation_4=ruleCompareOperation    {
		$current.merge(this_CompareOperation_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }
    this_STRING_5=RULE_STRING    {
		$current.merge(this_STRING_5);
    }

    { 
    newLeafNode(this_STRING_5, grammarAccess.getCompareFormulaAccess().getSTRINGTerminalRuleCall_1_2()); 
    }
))
    ;





// Entry rule entryRuleMyID
entryRuleMyID returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getMyIDRule()); } 
	 iv_ruleMyID=ruleMyID 
	 { $current=$iv_ruleMyID.current.getText(); }  
	 EOF 
;

// Rule MyID
ruleMyID returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMyIDAccess().getHyphenMinusKeyword_0()); 
    }
)?(    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    newLeafNode(this_ID_1, grammarAccess.getMyIDAccess().getIDTerminalRuleCall_1_0()); 
    }

    |(
	kw='!' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMyIDAccess().getExclamationMarkKeyword_1_1_0()); 
    }
    this_ID_3=RULE_ID    {
		$current.merge(this_ID_3);
    }

    { 
    newLeafNode(this_ID_3, grammarAccess.getMyIDAccess().getIDTerminalRuleCall_1_1_1()); 
    }
)))
    ;





// Entry rule entryRuleTestcaseElement
entryRuleTestcaseElement returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTestcaseElementRule()); } 
	 iv_ruleTestcaseElement=ruleTestcaseElement 
	 { $current=$iv_ruleTestcaseElement.current.getText(); }  
	 EOF 
;

// Rule TestcaseElement
ruleTestcaseElement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getTestcaseElementAccess().getCompareFormulaParserRuleCall_0()); 
    }
    this_CompareFormula_0=ruleCompareFormula    {
		$current.merge(this_CompareFormula_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTestcaseElementAccess().getMathFormulaParserRuleCall_1()); 
    }
    this_MathFormula_1=ruleMathFormula    {
		$current.merge(this_MathFormula_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleEnum
entryRuleEnum returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEnumRule()); } 
	 iv_ruleEnum=ruleEnum 
	 { $current=$iv_ruleEnum.current.getText(); }  
	 EOF 
;

// Rule Enum
ruleEnum returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='enum' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEnumAccess().getEnumKeyword_0()); 
    }
(    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    newLeafNode(this_ID_1, grammarAccess.getEnumAccess().getIDTerminalRuleCall_1_0()); 
    }

    |
	kw='Int' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEnumAccess().getIntKeyword_1_1()); 
    }

    |
	kw='Real' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEnumAccess().getRealKeyword_1_2()); 
    }

    |
	kw='Bool' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEnumAccess().getBoolKeyword_1_3()); 
    }

    |
	kw='String' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEnumAccess().getStringKeyword_1_4()); 
    }
)
	kw='{' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEnumAccess().getLeftCurlyBracketKeyword_2()); 
    }

    { 
        newCompositeNode(grammarAccess.getEnumAccess().getEnumOptionsParserRuleCall_3()); 
    }
    this_EnumOptions_7=ruleEnumOptions    {
		$current.merge(this_EnumOptions_7);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='}' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEnumAccess().getRightCurlyBracketKeyword_4()); 
    }
)
    ;





// Entry rule entryRuleEnumOptions
entryRuleEnumOptions returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEnumOptionsRule()); } 
	 iv_ruleEnumOptions=ruleEnumOptions 
	 { $current=$iv_ruleEnumOptions.current.getText(); }  
	 EOF 
;

// Rule EnumOptions
ruleEnumOptions returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getEnumOptionsAccess().getIDTerminalRuleCall()); 
    }
)*
    ;





// Entry rule entryRuleDefine
entryRuleDefine returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDefineRule()); }
	 iv_ruleDefine=ruleDefine 
	 { $current=$iv_ruleDefine.current; } 
	 EOF 
;

// Rule Define
ruleDefine returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='define' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDefineAccess().getDefineKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getDefineAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDefineRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getDefineAccess().getLeftCurlyBracketKeyword_2());
    }
(	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getDefineAccess().getLeftParenthesisKeyword_3());
    }
)?(
    { 
        newCompositeNode(grammarAccess.getDefineAccess().getCompareFormulaParserRuleCall_4_0()); 
    }
ruleCompareFormula
    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDefineAccess().getMyIDParserRuleCall_4_1()); 
    }
ruleMyID
    { 
        afterParserOrEnumRuleCall();
    }
)(	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getDefineAccess().getRightParenthesisKeyword_5());
    }
)?(
    { 
        newCompositeNode(grammarAccess.getDefineAccess().getConditionOperationParserRuleCall_6_0()); 
    }
ruleConditionOperation
    { 
        afterParserOrEnumRuleCall();
    }
(	otherlv_8='(' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getDefineAccess().getLeftParenthesisKeyword_6_1());
    }
)?(
    { 
        newCompositeNode(grammarAccess.getDefineAccess().getCompareFormulaParserRuleCall_6_2_0()); 
    }
ruleCompareFormula
    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDefineAccess().getMyIDParserRuleCall_6_2_1()); 
    }
ruleMyID
    { 
        afterParserOrEnumRuleCall();
    }
)(	otherlv_11=')' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getDefineAccess().getRightParenthesisKeyword_6_3());
    }
)?)*	otherlv_12='}' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getDefineAccess().getRightCurlyBracketKeyword_7());
    }
)
;





// Entry rule entryRulePrecondition
entryRulePrecondition returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getPreconditionRule()); } 
	 iv_rulePrecondition=rulePrecondition 
	 { $current=$iv_rulePrecondition.current.getText(); }  
	 EOF 
;

// Rule Precondition
rulePrecondition returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='precondition' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPreconditionAccess().getPreconditionKeyword_0()); 
    }

	kw='{' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPreconditionAccess().getLeftCurlyBracketKeyword_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getPreconditionAccess().getCompareFormulaParserRuleCall_2()); 
    }
    this_CompareFormula_2=ruleCompareFormula    {
		$current.merge(this_CompareFormula_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
    { 
        newCompositeNode(grammarAccess.getPreconditionAccess().getConditionOperationParserRuleCall_3_0()); 
    }
    this_ConditionOperation_3=ruleConditionOperation    {
		$current.merge(this_ConditionOperation_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getPreconditionAccess().getCompareFormulaParserRuleCall_3_1()); 
    }
    this_CompareFormula_4=ruleCompareFormula    {
		$current.merge(this_CompareFormula_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*
	kw='}' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPreconditionAccess().getRightCurlyBracketKeyword_4()); 
    }
)
    ;





// Entry rule entryRuleTestCondition
entryRuleTestCondition returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTestConditionRule()); } 
	 iv_ruleTestCondition=ruleTestCondition 
	 { $current=$iv_ruleTestCondition.current.getText(); }  
	 EOF 
;

// Rule TestCondition
ruleTestCondition returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_STRING_0=RULE_STRING    {
		$current.merge(this_STRING_0);
    }

    { 
    newLeafNode(this_STRING_0, grammarAccess.getTestConditionAccess().getSTRINGTerminalRuleCall_0()); 
    }
((
	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTestConditionAccess().getLeftParenthesisKeyword_1_0()); 
    }
)?
    { 
        newCompositeNode(grammarAccess.getTestConditionAccess().getTestcaseElementParserRuleCall_1_1()); 
    }
    this_TestcaseElement_2=ruleTestcaseElement    {
		$current.merge(this_TestcaseElement_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTestConditionAccess().getRightParenthesisKeyword_1_2()); 
    }
)?(
	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTestConditionAccess().getLeftParenthesisKeyword_1_3()); 
    }
)?(
    { 
        newCompositeNode(grammarAccess.getTestConditionAccess().getConditionOperationParserRuleCall_1_4_0()); 
    }
    this_ConditionOperation_5=ruleConditionOperation    {
		$current.merge(this_ConditionOperation_5);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTestConditionAccess().getLeftParenthesisKeyword_1_4_1()); 
    }
)?
    { 
        newCompositeNode(grammarAccess.getTestConditionAccess().getTestcaseElementParserRuleCall_1_4_2()); 
    }
    this_TestcaseElement_7=ruleTestcaseElement    {
		$current.merge(this_TestcaseElement_7);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTestConditionAccess().getRightParenthesisKeyword_1_4_3()); 
    }
)?)*(
	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTestConditionAccess().getRightParenthesisKeyword_1_5()); 
    }
)?)?)
    ;





// Entry rule entryRuleTestcase
entryRuleTestcase returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTestcaseRule()); } 
	 iv_ruleTestcase=ruleTestcase 
	 { $current=$iv_ruleTestcase.current.getText(); }  
	 EOF 
;

// Rule Testcase
ruleTestcase returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='testcase' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTestcaseAccess().getTestcaseKeyword_0()); 
    }

	kw='{' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTestcaseAccess().getLeftCurlyBracketKeyword_1()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getTestcaseAccess().getTestConditionParserRuleCall_2()); 
    }
    this_TestCondition_2=ruleTestCondition    {
		$current.merge(this_TestCondition_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*
	kw='}' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTestcaseAccess().getRightCurlyBracketKeyword_3()); 
    }
)
    ;





// Entry rule entryRuleDatatype
entryRuleDatatype returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getDatatypeRule()); } 
	 iv_ruleDatatype=ruleDatatype 
	 { $current=$iv_ruleDatatype.current.getText(); }  
	 EOF 
;

// Rule Datatype
ruleDatatype returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='Int' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDatatypeAccess().getIntKeyword_0()); 
    }

    |
	kw='Real' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDatatypeAccess().getRealKeyword_1()); 
    }

    |
	kw='Bool' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDatatypeAccess().getBoolKeyword_2()); 
    }

    |
	kw='String' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDatatypeAccess().getStringKeyword_3()); 
    }
)
    ;





// Entry rule entryRuleFunction
entryRuleFunction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctionRule()); }
	 iv_ruleFunction=ruleFunction 
	 { $current=$iv_ruleFunction.current; } 
	 EOF 
;

// Rule Function
ruleFunction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='function' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFunctionAccess().getFunctionKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getFunctionAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFunctionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFunctionAccess().getLeftParenthesisKeyword_2());
    }
(
    { 
        newCompositeNode(grammarAccess.getFunctionAccess().getDatatypeParserRuleCall_3_0()); 
    }
ruleDatatype
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		lv_name_4_0=RULE_ID
		{
			newLeafNode(lv_name_4_0, grammarAccess.getFunctionAccess().getNameIDTerminalRuleCall_3_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFunctionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_4_0, 
        		"ID");
	    }

)
)(	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getFunctionAccess().getCommaKeyword_3_2_0());
    }

    { 
        newCompositeNode(grammarAccess.getFunctionAccess().getDatatypeParserRuleCall_3_2_1()); 
    }
ruleDatatype
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		lv_name_7_0=RULE_ID
		{
			newLeafNode(lv_name_7_0, grammarAccess.getFunctionAccess().getNameIDTerminalRuleCall_3_2_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFunctionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_7_0, 
        		"ID");
	    }

)
))*)*	otherlv_8=')' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getFunctionAccess().getRightParenthesisKeyword_4());
    }
)
;





// Entry rule entryRuleRun
entryRuleRun returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getRunRule()); } 
	 iv_ruleRun=ruleRun 
	 { $current=$iv_ruleRun.current.getText(); }  
	 EOF 
;

// Rule Run
ruleRun returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='run' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRunAccess().getRunKeyword()); 
    }

    ;





RULE_DIGIT : '-'? ('0'..'9')*;

RULE_REAL : RULE_DIGIT '.' RULE_DIGIT;

RULE_STRING : '"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


