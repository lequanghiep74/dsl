/*
* generated by Xtext
*/
grammar InternalDomainmodel;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package org.xtext.example.domainmodel.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.example.domainmodel.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.xtext.example.domainmodel.services.DomainmodelGrammarAccess;

}

@parser::members {
 
 	private DomainmodelGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(DomainmodelGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleModel
entryRuleModel 
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getModelAccess().getMyDSLAssignment()); }
(rule__Model__MyDSLAssignment)*
{ after(grammarAccess.getModelAccess().getMyDSLAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulemyDSL
entryRulemyDSL 
:
{ before(grammarAccess.getMyDSLRule()); }
	 rulemyDSL
{ after(grammarAccess.getMyDSLRule()); } 
	 EOF 
;

// Rule myDSL
rulemyDSL
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMyDSLAccess().getAlternatives()); }
(rule__MyDSL__Alternatives)
{ after(grammarAccess.getMyDSLAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConditionOperation
entryRuleConditionOperation 
:
{ before(grammarAccess.getConditionOperationRule()); }
	 ruleConditionOperation
{ after(grammarAccess.getConditionOperationRule()); } 
	 EOF 
;

// Rule ConditionOperation
ruleConditionOperation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConditionOperationAccess().getAlternatives()); }
(rule__ConditionOperation__Alternatives)
{ after(grammarAccess.getConditionOperationAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMathOperation
entryRuleMathOperation 
:
{ before(grammarAccess.getMathOperationRule()); }
	 ruleMathOperation
{ after(grammarAccess.getMathOperationRule()); } 
	 EOF 
;

// Rule MathOperation
ruleMathOperation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMathOperationAccess().getAlternatives()); }
(rule__MathOperation__Alternatives)
{ after(grammarAccess.getMathOperationAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCompareOperation
entryRuleCompareOperation 
:
{ before(grammarAccess.getCompareOperationRule()); }
	 ruleCompareOperation
{ after(grammarAccess.getCompareOperationRule()); } 
	 EOF 
;

// Rule CompareOperation
ruleCompareOperation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCompareOperationAccess().getAlternatives()); }
(rule__CompareOperation__Alternatives)
{ after(grammarAccess.getCompareOperationAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVariable
entryRuleVariable 
:
{ before(grammarAccess.getVariableRule()); }
	 ruleVariable
{ after(grammarAccess.getVariableRule()); } 
	 EOF 
;

// Rule Variable
ruleVariable
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVariableAccess().getAlternatives()); }
(rule__Variable__Alternatives)
{ after(grammarAccess.getVariableAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMathFormula
entryRuleMathFormula 
:
{ before(grammarAccess.getMathFormulaRule()); }
	 ruleMathFormula
{ after(grammarAccess.getMathFormulaRule()); } 
	 EOF 
;

// Rule MathFormula
ruleMathFormula
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMathFormulaAccess().getGroup()); }
(rule__MathFormula__Group__0)
{ after(grammarAccess.getMathFormulaAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCompareFormula
entryRuleCompareFormula 
:
{ before(grammarAccess.getCompareFormulaRule()); }
	 ruleCompareFormula
{ after(grammarAccess.getCompareFormulaRule()); } 
	 EOF 
;

// Rule CompareFormula
ruleCompareFormula
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCompareFormulaAccess().getAlternatives()); }
(rule__CompareFormula__Alternatives)
{ after(grammarAccess.getCompareFormulaAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMyID
entryRuleMyID 
:
{ before(grammarAccess.getMyIDRule()); }
	 ruleMyID
{ after(grammarAccess.getMyIDRule()); } 
	 EOF 
;

// Rule MyID
ruleMyID
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMyIDAccess().getGroup()); }
(rule__MyID__Group__0)
{ after(grammarAccess.getMyIDAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTestcaseElement
entryRuleTestcaseElement 
:
{ before(grammarAccess.getTestcaseElementRule()); }
	 ruleTestcaseElement
{ after(grammarAccess.getTestcaseElementRule()); } 
	 EOF 
;

// Rule TestcaseElement
ruleTestcaseElement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTestcaseElementAccess().getAlternatives()); }
(rule__TestcaseElement__Alternatives)
{ after(grammarAccess.getTestcaseElementAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEnum
entryRuleEnum 
:
{ before(grammarAccess.getEnumRule()); }
	 ruleEnum
{ after(grammarAccess.getEnumRule()); } 
	 EOF 
;

// Rule Enum
ruleEnum
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEnumAccess().getGroup()); }
(rule__Enum__Group__0)
{ after(grammarAccess.getEnumAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEnumOptions
entryRuleEnumOptions 
:
{ before(grammarAccess.getEnumOptionsRule()); }
	 ruleEnumOptions
{ after(grammarAccess.getEnumOptionsRule()); } 
	 EOF 
;

// Rule EnumOptions
ruleEnumOptions
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEnumOptionsAccess().getIDTerminalRuleCall()); }
(	RULE_ID)*
{ after(grammarAccess.getEnumOptionsAccess().getIDTerminalRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDefine
entryRuleDefine 
:
{ before(grammarAccess.getDefineRule()); }
	 ruleDefine
{ after(grammarAccess.getDefineRule()); } 
	 EOF 
;

// Rule Define
ruleDefine
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDefineAccess().getGroup()); }
(rule__Define__Group__0)
{ after(grammarAccess.getDefineAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePrecondition
entryRulePrecondition 
:
{ before(grammarAccess.getPreconditionRule()); }
	 rulePrecondition
{ after(grammarAccess.getPreconditionRule()); } 
	 EOF 
;

// Rule Precondition
rulePrecondition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPreconditionAccess().getGroup()); }
(rule__Precondition__Group__0)
{ after(grammarAccess.getPreconditionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTestCondition
entryRuleTestCondition 
:
{ before(grammarAccess.getTestConditionRule()); }
	 ruleTestCondition
{ after(grammarAccess.getTestConditionRule()); } 
	 EOF 
;

// Rule TestCondition
ruleTestCondition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTestConditionAccess().getGroup()); }
(rule__TestCondition__Group__0)
{ after(grammarAccess.getTestConditionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTestcase
entryRuleTestcase 
:
{ before(grammarAccess.getTestcaseRule()); }
	 ruleTestcase
{ after(grammarAccess.getTestcaseRule()); } 
	 EOF 
;

// Rule Testcase
ruleTestcase
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTestcaseAccess().getGroup()); }
(rule__Testcase__Group__0)
{ after(grammarAccess.getTestcaseAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDatatype
entryRuleDatatype 
:
{ before(grammarAccess.getDatatypeRule()); }
	 ruleDatatype
{ after(grammarAccess.getDatatypeRule()); } 
	 EOF 
;

// Rule Datatype
ruleDatatype
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDatatypeAccess().getAlternatives()); }
(rule__Datatype__Alternatives)
{ after(grammarAccess.getDatatypeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFunction
entryRuleFunction 
:
{ before(grammarAccess.getFunctionRule()); }
	 ruleFunction
{ after(grammarAccess.getFunctionRule()); } 
	 EOF 
;

// Rule Function
ruleFunction
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFunctionAccess().getGroup()); }
(rule__Function__Group__0)
{ after(grammarAccess.getFunctionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRun
entryRuleRun 
:
{ before(grammarAccess.getRunRule()); }
	 ruleRun
{ after(grammarAccess.getRunRule()); } 
	 EOF 
;

// Rule Run
ruleRun
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRunAccess().getRunKeyword()); }

	'run' 

{ after(grammarAccess.getRunAccess().getRunKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__MyDSL__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMyDSLAccess().getEnumParserRuleCall_0()); }
	ruleEnum
{ after(grammarAccess.getMyDSLAccess().getEnumParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getMyDSLAccess().getDefineParserRuleCall_1()); }
	ruleDefine
{ after(grammarAccess.getMyDSLAccess().getDefineParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getMyDSLAccess().getPreconditionParserRuleCall_2()); }
	rulePrecondition
{ after(grammarAccess.getMyDSLAccess().getPreconditionParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getMyDSLAccess().getTestcaseParserRuleCall_3()); }
	ruleTestcase
{ after(grammarAccess.getMyDSLAccess().getTestcaseParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getMyDSLAccess().getFunctionParserRuleCall_4()); }
	ruleFunction
{ after(grammarAccess.getMyDSLAccess().getFunctionParserRuleCall_4()); }
)

    |(
{ before(grammarAccess.getMyDSLAccess().getRunParserRuleCall_5()); }
	ruleRun
{ after(grammarAccess.getMyDSLAccess().getRunParserRuleCall_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionOperation__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionOperationAccess().getVerticalLineVerticalLineKeyword_0()); }

	'||' 

{ after(grammarAccess.getConditionOperationAccess().getVerticalLineVerticalLineKeyword_0()); }
)

    |(
{ before(grammarAccess.getConditionOperationAccess().getAmpersandAmpersandKeyword_1()); }

	'&&' 

{ after(grammarAccess.getConditionOperationAccess().getAmpersandAmpersandKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MathOperation__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMathOperationAccess().getPlusSignKeyword_0()); }

	'+' 

{ after(grammarAccess.getMathOperationAccess().getPlusSignKeyword_0()); }
)

    |(
{ before(grammarAccess.getMathOperationAccess().getHyphenMinusKeyword_1()); }

	'-' 

{ after(grammarAccess.getMathOperationAccess().getHyphenMinusKeyword_1()); }
)

    |(
{ before(grammarAccess.getMathOperationAccess().getAsteriskKeyword_2()); }

	'*' 

{ after(grammarAccess.getMathOperationAccess().getAsteriskKeyword_2()); }
)

    |(
{ before(grammarAccess.getMathOperationAccess().getSolidusKeyword_3()); }

	'/' 

{ after(grammarAccess.getMathOperationAccess().getSolidusKeyword_3()); }
)

    |(
{ before(grammarAccess.getMathOperationAccess().getCircumflexAccentKeyword_4()); }

	'^' 

{ after(grammarAccess.getMathOperationAccess().getCircumflexAccentKeyword_4()); }
)

    |(
{ before(grammarAccess.getMathOperationAccess().getPercentSignKeyword_5()); }

	'%' 

{ after(grammarAccess.getMathOperationAccess().getPercentSignKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CompareOperation__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareOperationAccess().getGreaterThanSignKeyword_0()); }

	'>' 

{ after(grammarAccess.getCompareOperationAccess().getGreaterThanSignKeyword_0()); }
)

    |(
{ before(grammarAccess.getCompareOperationAccess().getLessThanSignKeyword_1()); }

	'<' 

{ after(grammarAccess.getCompareOperationAccess().getLessThanSignKeyword_1()); }
)

    |(
{ before(grammarAccess.getCompareOperationAccess().getEqualsSignKeyword_2()); }

	'=' 

{ after(grammarAccess.getCompareOperationAccess().getEqualsSignKeyword_2()); }
)

    |(
{ before(grammarAccess.getCompareOperationAccess().getGreaterThanSignEqualsSignKeyword_3()); }

	'>=' 

{ after(grammarAccess.getCompareOperationAccess().getGreaterThanSignEqualsSignKeyword_3()); }
)

    |(
{ before(grammarAccess.getCompareOperationAccess().getLessThanSignEqualsSignKeyword_4()); }

	'<=' 

{ after(grammarAccess.getCompareOperationAccess().getLessThanSignEqualsSignKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableAccess().getMyIDParserRuleCall_0()); }
	ruleMyID
{ after(grammarAccess.getVariableAccess().getMyIDParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getVariableAccess().getDIGITTerminalRuleCall_1()); }
	RULE_DIGIT
{ after(grammarAccess.getVariableAccess().getDIGITTerminalRuleCall_1()); }
)

    |(
{ before(grammarAccess.getVariableAccess().getREALTerminalRuleCall_2()); }
	RULE_REAL
{ after(grammarAccess.getVariableAccess().getREALTerminalRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CompareFormula__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareFormulaAccess().getGroup_0()); }
(rule__CompareFormula__Group_0__0)
{ after(grammarAccess.getCompareFormulaAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getCompareFormulaAccess().getGroup_1()); }
(rule__CompareFormula__Group_1__0)
{ after(grammarAccess.getCompareFormulaAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MyID__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMyIDAccess().getIDTerminalRuleCall_1_0()); }
	RULE_ID
{ after(grammarAccess.getMyIDAccess().getIDTerminalRuleCall_1_0()); }
)

    |(
{ before(grammarAccess.getMyIDAccess().getGroup_1_1()); }
(rule__MyID__Group_1_1__0)
{ after(grammarAccess.getMyIDAccess().getGroup_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TestcaseElement__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestcaseElementAccess().getCompareFormulaParserRuleCall_0()); }
	ruleCompareFormula
{ after(grammarAccess.getTestcaseElementAccess().getCompareFormulaParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getTestcaseElementAccess().getMathFormulaParserRuleCall_1()); }
	ruleMathFormula
{ after(grammarAccess.getTestcaseElementAccess().getMathFormulaParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Enum__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumAccess().getIDTerminalRuleCall_1_0()); }
	RULE_ID
{ after(grammarAccess.getEnumAccess().getIDTerminalRuleCall_1_0()); }
)

    |(
{ before(grammarAccess.getEnumAccess().getIntKeyword_1_1()); }

	'Int' 

{ after(grammarAccess.getEnumAccess().getIntKeyword_1_1()); }
)

    |(
{ before(grammarAccess.getEnumAccess().getRealKeyword_1_2()); }

	'Real' 

{ after(grammarAccess.getEnumAccess().getRealKeyword_1_2()); }
)

    |(
{ before(grammarAccess.getEnumAccess().getBoolKeyword_1_3()); }

	'Bool' 

{ after(grammarAccess.getEnumAccess().getBoolKeyword_1_3()); }
)

    |(
{ before(grammarAccess.getEnumAccess().getStringKeyword_1_4()); }

	'String' 

{ after(grammarAccess.getEnumAccess().getStringKeyword_1_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Define__Alternatives_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefineAccess().getCompareFormulaParserRuleCall_4_0()); }
	ruleCompareFormula
{ after(grammarAccess.getDefineAccess().getCompareFormulaParserRuleCall_4_0()); }
)

    |(
{ before(grammarAccess.getDefineAccess().getMyIDParserRuleCall_4_1()); }
	ruleMyID
{ after(grammarAccess.getDefineAccess().getMyIDParserRuleCall_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Define__Alternatives_6_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefineAccess().getCompareFormulaParserRuleCall_6_2_0()); }
	ruleCompareFormula
{ after(grammarAccess.getDefineAccess().getCompareFormulaParserRuleCall_6_2_0()); }
)

    |(
{ before(grammarAccess.getDefineAccess().getMyIDParserRuleCall_6_2_1()); }
	ruleMyID
{ after(grammarAccess.getDefineAccess().getMyIDParserRuleCall_6_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Datatype__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDatatypeAccess().getIntKeyword_0()); }

	'Int' 

{ after(grammarAccess.getDatatypeAccess().getIntKeyword_0()); }
)

    |(
{ before(grammarAccess.getDatatypeAccess().getRealKeyword_1()); }

	'Real' 

{ after(grammarAccess.getDatatypeAccess().getRealKeyword_1()); }
)

    |(
{ before(grammarAccess.getDatatypeAccess().getBoolKeyword_2()); }

	'Bool' 

{ after(grammarAccess.getDatatypeAccess().getBoolKeyword_2()); }
)

    |(
{ before(grammarAccess.getDatatypeAccess().getStringKeyword_3()); }

	'String' 

{ after(grammarAccess.getDatatypeAccess().getStringKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__MathFormula__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MathFormula__Group__0__Impl
	rule__MathFormula__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MathFormula__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMathFormulaAccess().getLeftParenthesisKeyword_0()); }
(
	'(' 
)?
{ after(grammarAccess.getMathFormulaAccess().getLeftParenthesisKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MathFormula__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MathFormula__Group__1__Impl
	rule__MathFormula__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MathFormula__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMathFormulaAccess().getVariableParserRuleCall_1()); }
	ruleVariable
{ after(grammarAccess.getMathFormulaAccess().getVariableParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MathFormula__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MathFormula__Group__2__Impl
	rule__MathFormula__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__MathFormula__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMathFormulaAccess().getGroup_2()); }
(rule__MathFormula__Group_2__0)*
{ after(grammarAccess.getMathFormulaAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MathFormula__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MathFormula__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MathFormula__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMathFormulaAccess().getRightParenthesisKeyword_3()); }
(
	')' 
)?
{ after(grammarAccess.getMathFormulaAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__MathFormula__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MathFormula__Group_2__0__Impl
	rule__MathFormula__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MathFormula__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMathFormulaAccess().getMathOperationParserRuleCall_2_0()); }
	ruleMathOperation
{ after(grammarAccess.getMathFormulaAccess().getMathOperationParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MathFormula__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MathFormula__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MathFormula__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMathFormulaAccess().getVariableParserRuleCall_2_1()); }
	ruleVariable
{ after(grammarAccess.getMathFormulaAccess().getVariableParserRuleCall_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__CompareFormula__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CompareFormula__Group_0__0__Impl
	rule__CompareFormula__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CompareFormula__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareFormulaAccess().getMathFormulaParserRuleCall_0_0()); }
	ruleMathFormula
{ after(grammarAccess.getCompareFormulaAccess().getMathFormulaParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CompareFormula__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CompareFormula__Group_0__1__Impl
	rule__CompareFormula__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CompareFormula__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareFormulaAccess().getCompareOperationParserRuleCall_0_1()); }
	ruleCompareOperation
{ after(grammarAccess.getCompareFormulaAccess().getCompareOperationParserRuleCall_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CompareFormula__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CompareFormula__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CompareFormula__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareFormulaAccess().getMathFormulaParserRuleCall_0_2()); }
	ruleMathFormula
{ after(grammarAccess.getCompareFormulaAccess().getMathFormulaParserRuleCall_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__CompareFormula__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CompareFormula__Group_1__0__Impl
	rule__CompareFormula__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CompareFormula__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareFormulaAccess().getMathFormulaParserRuleCall_1_0()); }
	ruleMathFormula
{ after(grammarAccess.getCompareFormulaAccess().getMathFormulaParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CompareFormula__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CompareFormula__Group_1__1__Impl
	rule__CompareFormula__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CompareFormula__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareFormulaAccess().getCompareOperationParserRuleCall_1_1()); }
	ruleCompareOperation
{ after(grammarAccess.getCompareFormulaAccess().getCompareOperationParserRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CompareFormula__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CompareFormula__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CompareFormula__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareFormulaAccess().getSTRINGTerminalRuleCall_1_2()); }
	RULE_STRING
{ after(grammarAccess.getCompareFormulaAccess().getSTRINGTerminalRuleCall_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__MyID__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MyID__Group__0__Impl
	rule__MyID__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MyID__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMyIDAccess().getHyphenMinusKeyword_0()); }
(
	'-' 
)?
{ after(grammarAccess.getMyIDAccess().getHyphenMinusKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MyID__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MyID__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MyID__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMyIDAccess().getAlternatives_1()); }
(rule__MyID__Alternatives_1)
{ after(grammarAccess.getMyIDAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MyID__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MyID__Group_1_1__0__Impl
	rule__MyID__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MyID__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMyIDAccess().getExclamationMarkKeyword_1_1_0()); }

	'!' 

{ after(grammarAccess.getMyIDAccess().getExclamationMarkKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MyID__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MyID__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MyID__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMyIDAccess().getIDTerminalRuleCall_1_1_1()); }
	RULE_ID
{ after(grammarAccess.getMyIDAccess().getIDTerminalRuleCall_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Enum__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Enum__Group__0__Impl
	rule__Enum__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Enum__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumAccess().getEnumKeyword_0()); }

	'enum' 

{ after(grammarAccess.getEnumAccess().getEnumKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Enum__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Enum__Group__1__Impl
	rule__Enum__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Enum__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumAccess().getAlternatives_1()); }
(rule__Enum__Alternatives_1)
{ after(grammarAccess.getEnumAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Enum__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Enum__Group__2__Impl
	rule__Enum__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Enum__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumAccess().getLeftCurlyBracketKeyword_2()); }

	'{' 

{ after(grammarAccess.getEnumAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Enum__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Enum__Group__3__Impl
	rule__Enum__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Enum__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumAccess().getEnumOptionsParserRuleCall_3()); }
	ruleEnumOptions
{ after(grammarAccess.getEnumAccess().getEnumOptionsParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Enum__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Enum__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Enum__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumAccess().getRightCurlyBracketKeyword_4()); }

	'}' 

{ after(grammarAccess.getEnumAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Define__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Define__Group__0__Impl
	rule__Define__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Define__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefineAccess().getDefineKeyword_0()); }

	'define' 

{ after(grammarAccess.getDefineAccess().getDefineKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Define__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Define__Group__1__Impl
	rule__Define__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Define__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefineAccess().getNameAssignment_1()); }
(rule__Define__NameAssignment_1)
{ after(grammarAccess.getDefineAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Define__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Define__Group__2__Impl
	rule__Define__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Define__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefineAccess().getLeftCurlyBracketKeyword_2()); }

	'{' 

{ after(grammarAccess.getDefineAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Define__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Define__Group__3__Impl
	rule__Define__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Define__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefineAccess().getLeftParenthesisKeyword_3()); }
(
	'(' 
)?
{ after(grammarAccess.getDefineAccess().getLeftParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Define__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Define__Group__4__Impl
	rule__Define__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Define__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefineAccess().getAlternatives_4()); }
(rule__Define__Alternatives_4)
{ after(grammarAccess.getDefineAccess().getAlternatives_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Define__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Define__Group__5__Impl
	rule__Define__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Define__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefineAccess().getRightParenthesisKeyword_5()); }
(
	')' 
)?
{ after(grammarAccess.getDefineAccess().getRightParenthesisKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Define__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Define__Group__6__Impl
	rule__Define__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Define__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefineAccess().getGroup_6()); }
(rule__Define__Group_6__0)*
{ after(grammarAccess.getDefineAccess().getGroup_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Define__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Define__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Define__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefineAccess().getRightCurlyBracketKeyword_7()); }

	'}' 

{ after(grammarAccess.getDefineAccess().getRightCurlyBracketKeyword_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


















rule__Define__Group_6__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Define__Group_6__0__Impl
	rule__Define__Group_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Define__Group_6__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefineAccess().getConditionOperationParserRuleCall_6_0()); }
	ruleConditionOperation
{ after(grammarAccess.getDefineAccess().getConditionOperationParserRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Define__Group_6__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Define__Group_6__1__Impl
	rule__Define__Group_6__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Define__Group_6__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefineAccess().getLeftParenthesisKeyword_6_1()); }
(
	'(' 
)?
{ after(grammarAccess.getDefineAccess().getLeftParenthesisKeyword_6_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Define__Group_6__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Define__Group_6__2__Impl
	rule__Define__Group_6__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Define__Group_6__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefineAccess().getAlternatives_6_2()); }
(rule__Define__Alternatives_6_2)
{ after(grammarAccess.getDefineAccess().getAlternatives_6_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Define__Group_6__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Define__Group_6__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Define__Group_6__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefineAccess().getRightParenthesisKeyword_6_3()); }
(
	')' 
)?
{ after(grammarAccess.getDefineAccess().getRightParenthesisKeyword_6_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Precondition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Precondition__Group__0__Impl
	rule__Precondition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Precondition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPreconditionAccess().getPreconditionKeyword_0()); }

	'precondition' 

{ after(grammarAccess.getPreconditionAccess().getPreconditionKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Precondition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Precondition__Group__1__Impl
	rule__Precondition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Precondition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPreconditionAccess().getLeftCurlyBracketKeyword_1()); }

	'{' 

{ after(grammarAccess.getPreconditionAccess().getLeftCurlyBracketKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Precondition__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Precondition__Group__2__Impl
	rule__Precondition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Precondition__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPreconditionAccess().getCompareFormulaParserRuleCall_2()); }
	ruleCompareFormula
{ after(grammarAccess.getPreconditionAccess().getCompareFormulaParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Precondition__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Precondition__Group__3__Impl
	rule__Precondition__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Precondition__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPreconditionAccess().getGroup_3()); }
(rule__Precondition__Group_3__0)*
{ after(grammarAccess.getPreconditionAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Precondition__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Precondition__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Precondition__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPreconditionAccess().getRightCurlyBracketKeyword_4()); }

	'}' 

{ after(grammarAccess.getPreconditionAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Precondition__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Precondition__Group_3__0__Impl
	rule__Precondition__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Precondition__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPreconditionAccess().getConditionOperationParserRuleCall_3_0()); }
	ruleConditionOperation
{ after(grammarAccess.getPreconditionAccess().getConditionOperationParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Precondition__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Precondition__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Precondition__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPreconditionAccess().getCompareFormulaParserRuleCall_3_1()); }
	ruleCompareFormula
{ after(grammarAccess.getPreconditionAccess().getCompareFormulaParserRuleCall_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TestCondition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TestCondition__Group__0__Impl
	rule__TestCondition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TestCondition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestConditionAccess().getSTRINGTerminalRuleCall_0()); }
	RULE_STRING
{ after(grammarAccess.getTestConditionAccess().getSTRINGTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TestCondition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TestCondition__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TestCondition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestConditionAccess().getGroup_1()); }
(rule__TestCondition__Group_1__0)?
{ after(grammarAccess.getTestConditionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TestCondition__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TestCondition__Group_1__0__Impl
	rule__TestCondition__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TestCondition__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestConditionAccess().getLeftParenthesisKeyword_1_0()); }
(
	'(' 
)?
{ after(grammarAccess.getTestConditionAccess().getLeftParenthesisKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TestCondition__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TestCondition__Group_1__1__Impl
	rule__TestCondition__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TestCondition__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestConditionAccess().getTestcaseElementParserRuleCall_1_1()); }
	ruleTestcaseElement
{ after(grammarAccess.getTestConditionAccess().getTestcaseElementParserRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TestCondition__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TestCondition__Group_1__2__Impl
	rule__TestCondition__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TestCondition__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestConditionAccess().getRightParenthesisKeyword_1_2()); }
(
	')' 
)?
{ after(grammarAccess.getTestConditionAccess().getRightParenthesisKeyword_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TestCondition__Group_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TestCondition__Group_1__3__Impl
	rule__TestCondition__Group_1__4
;
finally {
	restoreStackSize(stackSize);
}

rule__TestCondition__Group_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestConditionAccess().getLeftParenthesisKeyword_1_3()); }
(
	'(' 
)?
{ after(grammarAccess.getTestConditionAccess().getLeftParenthesisKeyword_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TestCondition__Group_1__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TestCondition__Group_1__4__Impl
	rule__TestCondition__Group_1__5
;
finally {
	restoreStackSize(stackSize);
}

rule__TestCondition__Group_1__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestConditionAccess().getGroup_1_4()); }
(rule__TestCondition__Group_1_4__0)*
{ after(grammarAccess.getTestConditionAccess().getGroup_1_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TestCondition__Group_1__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TestCondition__Group_1__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TestCondition__Group_1__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestConditionAccess().getRightParenthesisKeyword_1_5()); }
(
	')' 
)?
{ after(grammarAccess.getTestConditionAccess().getRightParenthesisKeyword_1_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__TestCondition__Group_1_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TestCondition__Group_1_4__0__Impl
	rule__TestCondition__Group_1_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TestCondition__Group_1_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestConditionAccess().getConditionOperationParserRuleCall_1_4_0()); }
	ruleConditionOperation
{ after(grammarAccess.getTestConditionAccess().getConditionOperationParserRuleCall_1_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TestCondition__Group_1_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TestCondition__Group_1_4__1__Impl
	rule__TestCondition__Group_1_4__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TestCondition__Group_1_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestConditionAccess().getLeftParenthesisKeyword_1_4_1()); }
(
	'(' 
)?
{ after(grammarAccess.getTestConditionAccess().getLeftParenthesisKeyword_1_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TestCondition__Group_1_4__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TestCondition__Group_1_4__2__Impl
	rule__TestCondition__Group_1_4__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TestCondition__Group_1_4__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestConditionAccess().getTestcaseElementParserRuleCall_1_4_2()); }
	ruleTestcaseElement
{ after(grammarAccess.getTestConditionAccess().getTestcaseElementParserRuleCall_1_4_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TestCondition__Group_1_4__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TestCondition__Group_1_4__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TestCondition__Group_1_4__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestConditionAccess().getRightParenthesisKeyword_1_4_3()); }
(
	')' 
)?
{ after(grammarAccess.getTestConditionAccess().getRightParenthesisKeyword_1_4_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Testcase__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Testcase__Group__0__Impl
	rule__Testcase__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Testcase__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestcaseAccess().getTestcaseKeyword_0()); }

	'testcase' 

{ after(grammarAccess.getTestcaseAccess().getTestcaseKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Testcase__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Testcase__Group__1__Impl
	rule__Testcase__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Testcase__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestcaseAccess().getLeftCurlyBracketKeyword_1()); }

	'{' 

{ after(grammarAccess.getTestcaseAccess().getLeftCurlyBracketKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Testcase__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Testcase__Group__2__Impl
	rule__Testcase__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Testcase__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestcaseAccess().getTestConditionParserRuleCall_2()); }
(	ruleTestCondition)*
{ after(grammarAccess.getTestcaseAccess().getTestConditionParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Testcase__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Testcase__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Testcase__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestcaseAccess().getRightCurlyBracketKeyword_3()); }

	'}' 

{ after(grammarAccess.getTestcaseAccess().getRightCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Function__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group__0__Impl
	rule__Function__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getFunctionKeyword_0()); }

	'function' 

{ after(grammarAccess.getFunctionAccess().getFunctionKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group__1__Impl
	rule__Function__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getNameAssignment_1()); }
(rule__Function__NameAssignment_1)
{ after(grammarAccess.getFunctionAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group__2__Impl
	rule__Function__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getLeftParenthesisKeyword_2()); }

	'(' 

{ after(grammarAccess.getFunctionAccess().getLeftParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group__3__Impl
	rule__Function__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getGroup_3()); }
(rule__Function__Group_3__0)*
{ after(grammarAccess.getFunctionAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getRightParenthesisKeyword_4()); }

	')' 

{ after(grammarAccess.getFunctionAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Function__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group_3__0__Impl
	rule__Function__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getDatatypeParserRuleCall_3_0()); }
	ruleDatatype
{ after(grammarAccess.getFunctionAccess().getDatatypeParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group_3__1__Impl
	rule__Function__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getNameAssignment_3_1()); }
(rule__Function__NameAssignment_3_1)
{ after(grammarAccess.getFunctionAccess().getNameAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group_3__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group_3__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_3__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getGroup_3_2()); }
(rule__Function__Group_3_2__0)*
{ after(grammarAccess.getFunctionAccess().getGroup_3_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Function__Group_3_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group_3_2__0__Impl
	rule__Function__Group_3_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_3_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getCommaKeyword_3_2_0()); }

	',' 

{ after(grammarAccess.getFunctionAccess().getCommaKeyword_3_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group_3_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group_3_2__1__Impl
	rule__Function__Group_3_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_3_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getDatatypeParserRuleCall_3_2_1()); }
	ruleDatatype
{ after(grammarAccess.getFunctionAccess().getDatatypeParserRuleCall_3_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group_3_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group_3_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_3_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getNameAssignment_3_2_2()); }
(rule__Function__NameAssignment_3_2_2)
{ after(grammarAccess.getFunctionAccess().getNameAssignment_3_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}









rule__Model__MyDSLAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getMyDSLMyDSLParserRuleCall_0()); }
	rulemyDSL{ after(grammarAccess.getModelAccess().getMyDSLMyDSLParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Define__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefineAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getDefineAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Function__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getFunctionAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Function__NameAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getNameIDTerminalRuleCall_3_1_0()); }
	RULE_ID{ after(grammarAccess.getFunctionAccess().getNameIDTerminalRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Function__NameAssignment_3_2_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getNameIDTerminalRuleCall_3_2_2_0()); }
	RULE_ID{ after(grammarAccess.getFunctionAccess().getNameIDTerminalRuleCall_3_2_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_DIGIT : '-'? ('0'..'9')*;

RULE_REAL : RULE_DIGIT '.' RULE_DIGIT;

RULE_STRING : '"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


